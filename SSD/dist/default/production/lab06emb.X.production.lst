

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri May 03 16:58:31 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.45
    22                           ; Generated 16/11/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F4520 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     
    56                           	psect	smallconst
    57  000600                     __psmallconst:
    58                           	opt stack 0
    59  000600  00                 	db	0
    60  000601                     _valor:
    61                           	opt stack 0
    62  000601  3F                 	db	63
    63  000602  06                 	db	6
    64  000603  5B                 	db	91
    65  000604  4F                 	db	79
    66  000605  66                 	db	102
    67  000606  6D                 	db	109
    68  000607  7D                 	db	125
    69  000608  07                 	db	7
    70  000609  7F                 	db	127
    71  00060A  6F                 	db	111
    72  00060B  77                 	db	119
    73  00060C  7C                 	db	124
    74  00060D  39                 	db	57
    75  00060E  5E                 	db	94
    76  00060F  79                 	db	121
    77  000610  71                 	db	113
    78  000611                     __end_of_valor:
    79                           	opt stack 0
    80                           
    81                           ; #config settings
    82  000611  00                 	db	0	; dummy byte at the end
    83  0000                     
    84                           	psect	cinit
    85  000BD8                     __pcinit:
    86                           	opt stack 0
    87  000BD8                     start_initialization:
    88                           	opt stack 0
    89  000BD8                     __initialization:
    90                           	opt stack 0
    91                           
    92                           ; Clear objects allocated to COMRAM (5 bytes)
    93  000BD8  6A1E               	clrf	(__pbssCOMRAM+4)& (0+255),c
    94  000BDA  6A1D               	clrf	(__pbssCOMRAM+3)& (0+255),c
    95  000BDC  6A1C               	clrf	(__pbssCOMRAM+2)& (0+255),c
    96  000BDE  6A1B               	clrf	(__pbssCOMRAM+1)& (0+255),c
    97  000BE0  6A1A               	clrf	__pbssCOMRAM& (0+255),c
    98  000BE2                     end_of_initialization:
    99                           	opt stack 0
   100  000BE2                     __end_of__initialization:
   101                           	opt stack 0
   102  000BE2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   103  000BE4  6EF8               	movwf	tblptru,c
   104  000BE6  0100               	movlb	0
   105  000BE8  EFDF  F003         	goto	_main	;jump to C main() function
   106                           tblptru	equ	0xFF8
   107                           
   108                           	psect	bssCOMRAM
   109  00001A                     __pbssCOMRAM:
   110                           	opt stack 0
   111  00001A                     _v3:
   112                           	opt stack 0
   113  00001A                     	ds	1
   114  00001B                     _v2:
   115                           	opt stack 0
   116  00001B                     	ds	1
   117  00001C                     _v1:
   118                           	opt stack 0
   119  00001C                     	ds	1
   120  00001D                     _v0:
   121                           	opt stack 0
   122  00001D                     	ds	1
   123  00001E                     _display:
   124                           	opt stack 0
   125  00001E                     	ds	1
   126                           tblptru	equ	0xFF8
   127                           
   128                           	psect	cstackCOMRAM
   129  000001                     __pcstackCOMRAM:
   130                           	opt stack 0
   131  000001                     ?___lwdiv:
   132                           	opt stack 0
   133  000001                     ?___ftpack:
   134                           	opt stack 0
   135  000001                     ___lwdiv@dividend:
   136                           	opt stack 0
   137  000001                     ___ftpack@arg:
   138                           	opt stack 0
   139  000001                     ___ftge@ff1:
   140                           	opt stack 0
   141                           
   142                           ; 3 bytes @ 0x0
   143  000001                     	ds	2
   144  000003                     ___lwdiv@divisor:
   145                           	opt stack 0
   146                           
   147                           ; 2 bytes @ 0x2
   148  000003                     	ds	1
   149  000004                     ___ftpack@exp:
   150                           	opt stack 0
   151  000004                     ___ftge@ff2:
   152                           	opt stack 0
   153                           
   154                           ; 3 bytes @ 0x3
   155  000004                     	ds	1
   156  000005                     ___ftpack@sign:
   157                           	opt stack 0
   158  000005                     ___lwdiv@quotient:
   159                           	opt stack 0
   160                           
   161                           ; 2 bytes @ 0x4
   162  000005                     	ds	1
   163  000006                     ??___ftpack:
   164                           
   165                           ; 1 bytes @ 0x5
   166  000006                     	ds	1
   167  000007                     ??___ftge:
   168  000007                     ___lwdiv@counter:
   169                           	opt stack 0
   170                           
   171                           ; 1 bytes @ 0x6
   172  000007                     	ds	1
   173  000008                     ?___lwmod:
   174                           	opt stack 0
   175  000008                     ___lwmod@dividend:
   176                           	opt stack 0
   177                           
   178                           ; 2 bytes @ 0x7
   179  000008                     	ds	1
   180  000009                     ?___ftadd:
   181                           	opt stack 0
   182  000009                     ___ftadd@f1:
   183                           	opt stack 0
   184                           
   185                           ; 3 bytes @ 0x8
   186  000009                     	ds	1
   187  00000A                     ___lwmod@divisor:
   188                           	opt stack 0
   189                           
   190                           ; 2 bytes @ 0x9
   191  00000A                     	ds	2
   192  00000C                     ___lwmod@counter:
   193                           	opt stack 0
   194  00000C                     ___ftadd@f2:
   195                           	opt stack 0
   196                           
   197                           ; 3 bytes @ 0xB
   198  00000C                     	ds	1
   199  00000D                     ssdDigit@pos:
   200                           	opt stack 0
   201                           
   202                           ; 1 bytes @ 0xC
   203  00000D                     	ds	1
   204  00000E                     ssdDigit@val:
   205                           	opt stack 0
   206                           
   207                           ; 1 bytes @ 0xD
   208  00000E                     	ds	1
   209  00000F                     ??___ftadd:
   210                           
   211                           ; 1 bytes @ 0xE
   212  00000F                     	ds	3
   213  000012                     ___ftadd@sign:
   214                           	opt stack 0
   215                           
   216                           ; 1 bytes @ 0x11
   217  000012                     	ds	1
   218  000013                     ___ftadd@exp2:
   219                           	opt stack 0
   220                           
   221                           ; 1 bytes @ 0x12
   222  000013                     	ds	1
   223  000014                     ___ftadd@exp1:
   224                           	opt stack 0
   225                           
   226                           ; 1 bytes @ 0x13
   227  000014                     	ds	1
   228  000015                     main@tempo:
   229                           	opt stack 0
   230                           
   231                           ; 3 bytes @ 0x14
   232  000015                     	ds	3
   233  000018                     main@cont:
   234                           	opt stack 0
   235                           
   236                           ; 2 bytes @ 0x17
   237  000018                     	ds	2
   238                           tblptru	equ	0xFF8
   239                           
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 4 in file "newmain.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;  tempo           3   20[COMRAM] float 
   250 ;;  cont            2   23[COMRAM] unsigned int 
   251 ;; Return value:  Size  Location     Type
   252 ;;                  1    wreg      void 
   253 ;; Registers used:
   254 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   255 ;; Tracked objects:
   256 ;;		On entry : 0/0
   257 ;;		On exit  : 0/0
   258 ;;		Unchanged: 0/0
   259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   260 ;;      Params:         0       0       0       0       0       0       0
   261 ;;      Locals:         5       0       0       0       0       0       0
   262 ;;      Temps:          0       0       0       0       0       0       0
   263 ;;      Totals:         5       0       0       0       0       0       0
   264 ;;Total ram usage:        5 bytes
   265 ;; Hardware stack levels required when called:    2
   266 ;; This function calls:
   267 ;;		___ftadd
   268 ;;		___ftge
   269 ;;		___lwdiv
   270 ;;		___lwmod
   271 ;;		_ssdDigit
   272 ;;		_ssdInit
   273 ;;		_ssdUpdate
   274 ;; This function is called by:
   275 ;;		Startup code after reset
   276 ;; This function uses a non-reentrant model
   277 ;;
   278                           
   279                           	psect	text0
   280  0007BE                     __ptext0:
   281                           	opt stack 0
   282  0007BE                     _main:
   283                           	opt stack 29
   284                           
   285                           ;newmain.c: 5: float tempo;
   286                           ;newmain.c: 6: unsigned int cont=0;
   287                           
   288                           ;incstack = 0
   289  0007BE  0E00               	movlw	0
   290  0007C0  6E19               	movwf	main@cont+1,c
   291  0007C2  0E00               	movlw	0
   292  0007C4  6E18               	movwf	main@cont,c
   293                           
   294                           ;newmain.c: 7: (*(volatile __near unsigned char*)0xF94) = 0X00;
   295  0007C6  0E00               	movlw	0
   296  0007C8  6E94               	movwf	3988,c	;volatile
   297                           
   298                           ;newmain.c: 8: (*(volatile __near unsigned char*)0xF82)= 0X00;
   299  0007CA  0E00               	movlw	0
   300  0007CC  6E82               	movwf	3970,c	;volatile
   301                           
   302                           ;newmain.c: 9: ssdInit();
   303  0007CE  ECF6  F005         	call	_ssdInit	;wreg free
   304  0007D2                     
   305                           ;newmain.c: 11: cont++;
   306  0007D2  4A18               	infsnz	main@cont,f,c
   307  0007D4  2A19               	incf	main@cont+1,f,c
   308                           
   309                           ;newmain.c: 12: ssdDigit(((cont/20) %10), 0);
   310  0007D6  0E00               	movlw	0
   311  0007D8  6E0D               	movwf	ssdDigit@pos,c
   312  0007DA  0E00               	movlw	0
   313  0007DC  6E04               	movwf	___lwdiv@divisor+1,c
   314  0007DE  0E14               	movlw	20
   315  0007E0  6E03               	movwf	___lwdiv@divisor,c
   316  0007E2  C018  F001         	movff	main@cont,___lwdiv@dividend
   317  0007E6  C019  F002         	movff	main@cont+1,___lwdiv@dividend+1
   318  0007EA  EC8D  F005         	call	___lwdiv	;wreg free
   319  0007EE  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   320  0007F2  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   321  0007F6  0E00               	movlw	0
   322  0007F8  6E0B               	movwf	___lwmod@divisor+1,c
   323  0007FA  0E0A               	movlw	10
   324  0007FC  6E0A               	movwf	___lwmod@divisor,c
   325  0007FE  ECB6  F005         	call	___lwmod	;wreg free
   326  000802  5008               	movf	?___lwmod,w,c
   327  000804  ECD7  F005         	call	_ssdDigit
   328                           
   329                           ;newmain.c: 13: ssdDigit(((cont/200)%10), 1);
   330  000808  0E01               	movlw	1
   331  00080A  6E0D               	movwf	ssdDigit@pos,c
   332  00080C  0E00               	movlw	0
   333  00080E  6E04               	movwf	___lwdiv@divisor+1,c
   334  000810  0EC8               	movlw	200
   335  000812  6E03               	movwf	___lwdiv@divisor,c
   336  000814  C018  F001         	movff	main@cont,___lwdiv@dividend
   337  000818  C019  F002         	movff	main@cont+1,___lwdiv@dividend+1
   338  00081C  EC8D  F005         	call	___lwdiv	;wreg free
   339  000820  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   340  000824  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   341  000828  0E00               	movlw	0
   342  00082A  6E0B               	movwf	___lwmod@divisor+1,c
   343  00082C  0E0A               	movlw	10
   344  00082E  6E0A               	movwf	___lwmod@divisor,c
   345  000830  ECB6  F005         	call	___lwmod	;wreg free
   346  000834  5008               	movf	?___lwmod,w,c
   347  000836  ECD7  F005         	call	_ssdDigit
   348                           
   349                           ;newmain.c: 14: ssdDigit(((cont/2000)%10), 2);
   350  00083A  0E02               	movlw	2
   351  00083C  6E0D               	movwf	ssdDigit@pos,c
   352  00083E  0E07               	movlw	7
   353  000840  6E04               	movwf	___lwdiv@divisor+1,c
   354  000842  0ED0               	movlw	208
   355  000844  6E03               	movwf	___lwdiv@divisor,c
   356  000846  C018  F001         	movff	main@cont,___lwdiv@dividend
   357  00084A  C019  F002         	movff	main@cont+1,___lwdiv@dividend+1
   358  00084E  EC8D  F005         	call	___lwdiv	;wreg free
   359  000852  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   360  000856  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   361  00085A  0E00               	movlw	0
   362  00085C  6E0B               	movwf	___lwmod@divisor+1,c
   363  00085E  0E0A               	movlw	10
   364  000860  6E0A               	movwf	___lwmod@divisor,c
   365  000862  ECB6  F005         	call	___lwmod	;wreg free
   366  000866  5008               	movf	?___lwmod,w,c
   367  000868  ECD7  F005         	call	_ssdDigit
   368                           
   369                           ;newmain.c: 15: ssdDigit(((cont/12000)%10), 3);
   370  00086C  0E03               	movlw	3
   371  00086E  6E0D               	movwf	ssdDigit@pos,c
   372  000870  0E2E               	movlw	46
   373  000872  6E04               	movwf	___lwdiv@divisor+1,c
   374  000874  0EE0               	movlw	224
   375  000876  6E03               	movwf	___lwdiv@divisor,c
   376  000878  C018  F001         	movff	main@cont,___lwdiv@dividend
   377  00087C  C019  F002         	movff	main@cont+1,___lwdiv@dividend+1
   378  000880  EC8D  F005         	call	___lwdiv	;wreg free
   379  000884  C001  F008         	movff	?___lwdiv,___lwmod@dividend
   380  000888  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
   381  00088C  0E00               	movlw	0
   382  00088E  6E0B               	movwf	___lwmod@divisor+1,c
   383  000890  0E0A               	movlw	10
   384  000892  6E0A               	movwf	___lwmod@divisor,c
   385  000894  ECB6  F005         	call	___lwmod	;wreg free
   386  000898  5008               	movf	?___lwmod,w,c
   387  00089A  ECD7  F005         	call	_ssdDigit
   388                           
   389                           ;newmain.c: 17: if(cont==2000){
   390  00089E  0ED0               	movlw	208
   391  0008A0  1818               	xorwf	main@cont,w,c
   392  0008A2  E104               	bnz	l1131
   393  0008A4  0E07               	movlw	7
   394  0008A6  1819               	xorwf	main@cont+1,w,c
   395  0008A8  B4D8               	btfsc	status,2,c
   396                           
   397                           ;newmain.c: 18: (*(volatile __near unsigned char*)0xF82) =0XFF;
   398  0008AA  6882               	setf	3970,c	;volatile
   399  0008AC                     l1131:
   400                           
   401                           ;newmain.c: 20: }
   402                           ;newmain.c: 21: if(cont==4000){
   403  0008AC  0EA0               	movlw	160
   404  0008AE  1818               	xorwf	main@cont,w,c
   405  0008B0  E106               	bnz	l1135
   406  0008B2  0E0F               	movlw	15
   407  0008B4  1819               	xorwf	main@cont+1,w,c
   408  0008B6  A4D8               	btfss	status,2,c
   409  0008B8  D002               	goto	l13
   410                           
   411                           ;newmain.c: 22: (*(volatile __near unsigned char*)0xF82) =0X00;
   412  0008BA  0E00               	movlw	0
   413  0008BC  6E82               	movwf	3970,c	;volatile
   414  0008BE                     l13:
   415  0008BE                     l1135:
   416                           
   417                           ;newmain.c: 24: }
   418                           ;newmain.c: 26: ssdUpdate();
   419  0008BE  ECF1  F004         	call	_ssdUpdate	;wreg free
   420                           
   421                           ;newmain.c: 27: for (tempo = 0;tempo < 30;tempo++);
   422  0008C2  0E00               	movlw	0
   423  0008C4  6E15               	movwf	main@tempo,c
   424  0008C6  0E00               	movlw	0
   425  0008C8  6E16               	movwf	main@tempo+1,c
   426  0008CA  0E00               	movlw	0
   427  0008CC  6E17               	movwf	main@tempo+2,c
   428  0008CE  C015  F001         	movff	main@tempo,___ftge@ff1
   429  0008D2  C016  F002         	movff	main@tempo+1,___ftge@ff1+1
   430  0008D6  C017  F003         	movff	main@tempo+2,___ftge@ff1+2
   431  0008DA  0E00               	movlw	0
   432  0008DC  6E04               	movwf	___ftge@ff2,c
   433  0008DE  0EF0               	movlw	240
   434  0008E0  6E05               	movwf	___ftge@ff2+1,c
   435  0008E2  0E41               	movlw	65
   436  0008E4  6E06               	movwf	___ftge@ff2+2,c
   437  0008E6  EC45  F005         	call	___ftge	;wreg free
   438  0008EA  B0D8               	btfsc	status,0,c
   439  0008EC  D772               	goto	l11
   440  0008EE  C015  F009         	movff	main@tempo,___ftadd@f1
   441  0008F2  C016  F00A         	movff	main@tempo+1,___ftadd@f1+1
   442  0008F6  C017  F00B         	movff	main@tempo+2,___ftadd@f1+2
   443  0008FA  0E00               	movlw	0
   444  0008FC  6E0C               	movwf	___ftadd@f2,c
   445  0008FE  0E80               	movlw	128
   446  000900  6E0D               	movwf	___ftadd@f2+1,c
   447  000902  0E3F               	movlw	63
   448  000904  6E0E               	movwf	___ftadd@f2+2,c
   449  000906  EC09  F003         	call	___ftadd	;wreg free
   450  00090A  C009  F015         	movff	?___ftadd,main@tempo
   451  00090E  C00A  F016         	movff	?___ftadd+1,main@tempo+1
   452  000912  C00B  F017         	movff	?___ftadd+2,main@tempo+2
   453  000916  C015  F001         	movff	main@tempo,___ftge@ff1
   454  00091A  C016  F002         	movff	main@tempo+1,___ftge@ff1+1
   455  00091E  C017  F003         	movff	main@tempo+2,___ftge@ff1+2
   456  000922  0E00               	movlw	0
   457  000924  6E04               	movwf	___ftge@ff2,c
   458  000926  0EF0               	movlw	240
   459  000928  6E05               	movwf	___ftge@ff2+1,c
   460  00092A  0E41               	movlw	65
   461  00092C  6E06               	movwf	___ftge@ff2+2,c
   462  00092E  EC45  F005         	call	___ftge	;wreg free
   463  000932  D7DB               	goto	L1
   464  000934                     __end_of_main:
   465                           	opt stack 0
   466                           tblptru	equ	0xFF8
   467                           status	equ	0xFD8
   468                           
   469 ;; *************** function _ssdUpdate *****************
   470 ;; Defined at:
   471 ;;		line 52 in file "ssd.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;		None
   476 ;; Return value:  Size  Location     Type
   477 ;;                  1    wreg      void 
   478 ;; Registers used:
   479 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   485 ;;      Params:         0       0       0       0       0       0       0
   486 ;;      Locals:         0       0       0       0       0       0       0
   487 ;;      Temps:          0       0       0       0       0       0       0
   488 ;;      Totals:         0       0       0       0       0       0       0
   489 ;;Total ram usage:        0 bytes
   490 ;; Hardware stack levels used:    1
   491 ;; This function calls:
   492 ;;		Nothing
   493 ;; This function is called by:
   494 ;;		_main
   495 ;; This function uses a non-reentrant model
   496 ;;
   497                           
   498                           	psect	text1
   499  0009E2                     __ptext1:
   500                           	opt stack 0
   501  0009E2                     _ssdUpdate:
   502                           	opt stack 30
   503                           
   504                           ;ssd.c: 55: (*(volatile __near unsigned char*)0xF80) = 0x00;
   505                           
   506                           ;incstack = 0
   507  0009E2  0E00               	movlw	0
   508  0009E4  6E80               	movwf	3968,c	;volatile
   509                           
   510                           ;ssd.c: 56: (*(volatile __near unsigned char*)0xF84) = 0x00;
   511  0009E6  0E00               	movlw	0
   512  0009E8  6E84               	movwf	3972,c	;volatile
   513                           
   514                           ;ssd.c: 58: (*(volatile __near unsigned char*)0xF83) = 0x00;
   515  0009EA  0E00               	movlw	0
   516  0009EC  6E83               	movwf	3971,c	;volatile
   517                           
   518                           ;ssd.c: 60: switch(display)
   519  0009EE  D03F               	goto	l39
   520  0009F0                     
   521                           ;ssd.c: 63: (*(volatile __near unsigned char*)0xF83) = valor[v0];
   522  0009F0  501D               	movf	_v0,w,c
   523  0009F2  0D01               	mullw	1
   524  0009F4  0E01               	movlw	low _valor
   525  0009F6  24F3               	addwf	prodl,w,c
   526  0009F8  6EF6               	movwf	tblptrl,c
   527  0009FA  0E06               	movlw	high _valor
   528  0009FC  20F4               	addwfc	prodh,w,c
   529  0009FE  6EF7               	movwf	tblptrh,c
   530  000A00                     	if	0	;There are less than 3 active tblptr bytes
   531  000A00                     	endif
   532  000A00  0008               	tblrd		*
   533  000A02  CFF5 FF83          	movff	tablat,3971	;volatile
   534                           
   535                           ;ssd.c: 64: (((*(volatile __near unsigned char*)0xF80)) |= (1<<5));
   536  000A06  8A80               	bsf	3968,5,c	;volatile
   537                           
   538                           ;ssd.c: 65: display = 1;
   539  000A08  0E01               	movlw	1
   540  000A0A  6E1E               	movwf	_display,c
   541                           
   542                           ;ssd.c: 66: break;
   543  000A0C  0012               	return	
   544  000A0E                     
   545                           ;ssd.c: 69: (*(volatile __near unsigned char*)0xF83) = valor[v1];
   546  000A0E  501C               	movf	_v1,w,c
   547  000A10  0D01               	mullw	1
   548  000A12  0E01               	movlw	low _valor
   549  000A14  24F3               	addwf	prodl,w,c
   550  000A16  6EF6               	movwf	tblptrl,c
   551  000A18  0E06               	movlw	high _valor
   552  000A1A  20F4               	addwfc	prodh,w,c
   553  000A1C  6EF7               	movwf	tblptrh,c
   554  000A1E                     	if	0	;There are less than 3 active tblptr bytes
   555  000A1E                     	endif
   556  000A1E  0008               	tblrd		*
   557  000A20  CFF5 FF83          	movff	tablat,3971	;volatile
   558                           
   559                           ;ssd.c: 70: (((*(volatile __near unsigned char*)0xF80)) |= (1<<2));
   560  000A24  8480               	bsf	3968,2,c	;volatile
   561                           
   562                           ;ssd.c: 71: display = 2;
   563  000A26  0E02               	movlw	2
   564  000A28  6E1E               	movwf	_display,c
   565                           
   566                           ;ssd.c: 72: break;
   567  000A2A  0012               	return	
   568  000A2C                     
   569                           ;ssd.c: 75: (*(volatile __near unsigned char*)0xF83) = valor[v2];
   570  000A2C  501B               	movf	_v2,w,c
   571  000A2E  0D01               	mullw	1
   572  000A30  0E01               	movlw	low _valor
   573  000A32  24F3               	addwf	prodl,w,c
   574  000A34  6EF6               	movwf	tblptrl,c
   575  000A36  0E06               	movlw	high _valor
   576  000A38  20F4               	addwfc	prodh,w,c
   577  000A3A  6EF7               	movwf	tblptrh,c
   578  000A3C                     	if	0	;There are less than 3 active tblptr bytes
   579  000A3C                     	endif
   580  000A3C  0008               	tblrd		*
   581  000A3E  CFF5 FF83          	movff	tablat,3971	;volatile
   582                           
   583                           ;ssd.c: 76: (((*(volatile __near unsigned char*)0xF84)) |= (1<<0));
   584  000A42  8084               	bsf	3972,0,c	;volatile
   585                           
   586                           ;ssd.c: 77: display = 3;
   587  000A44  0E03               	movlw	3
   588  000A46  6E1E               	movwf	_display,c
   589                           
   590                           ;ssd.c: 78: break;
   591  000A48  0012               	return	
   592  000A4A                     
   593                           ;ssd.c: 81: (*(volatile __near unsigned char*)0xF83) = valor[v3];
   594  000A4A  501A               	movf	_v3,w,c
   595  000A4C  0D01               	mullw	1
   596  000A4E  0E01               	movlw	low _valor
   597  000A50  24F3               	addwf	prodl,w,c
   598  000A52  6EF6               	movwf	tblptrl,c
   599  000A54  0E06               	movlw	high _valor
   600  000A56  20F4               	addwfc	prodh,w,c
   601  000A58  6EF7               	movwf	tblptrh,c
   602  000A5A                     	if	0	;There are less than 3 active tblptr bytes
   603  000A5A                     	endif
   604  000A5A  0008               	tblrd		*
   605  000A5C  CFF5 FF83          	movff	tablat,3971	;volatile
   606                           
   607                           ;ssd.c: 82: (((*(volatile __near unsigned char*)0xF84)) |= (1<<2));
   608  000A60  8484               	bsf	3972,2,c	;volatile
   609                           
   610                           ;ssd.c: 83: display = 0;
   611  000A62  0E00               	movlw	0
   612  000A64  6E1E               	movwf	_display,c
   613                           
   614                           ;ssd.c: 84: break;
   615  000A66  0012               	return	
   616  000A68                     
   617                           ;ssd.c: 87: display = 0;
   618  000A68  0E00               	movlw	0
   619  000A6A  6E1E               	movwf	_display,c
   620                           
   621                           ;ssd.c: 89: }
   622                           
   623                           ;ssd.c: 88: break;
   624  000A6C  0012               	return	
   625  000A6E                     l39:
   626  000A6E  501E               	movf	_display,w,c
   627                           
   628                           ; Switch size 1, requested type "space"
   629                           ; Number of cases is 4, Range of values is 0 to 3
   630                           ; switch strategies available:
   631                           ; Name         Instructions Cycles
   632                           ; simple_byte           13     7 (average)
   633                           ;	Chosen strategy is simple_byte
   634  000A70  0A00               	xorlw	0	; case 0
   635  000A72  B4D8               	btfsc	status,2,c
   636  000A74  D7BD               	goto	l40
   637  000A76  0A01               	xorlw	1	; case 1
   638  000A78  B4D8               	btfsc	status,2,c
   639  000A7A  D7C9               	goto	l42
   640  000A7C  0A03               	xorlw	3	; case 2
   641  000A7E  B4D8               	btfsc	status,2,c
   642  000A80  D7D5               	goto	l43
   643  000A82  0A01               	xorlw	1	; case 3
   644  000A84  B4D8               	btfsc	status,2,c
   645  000A86  D7E1               	goto	l44
   646  000A88  D7EF               	goto	l45
   647  000A8A                     __end_of_ssdUpdate:
   648                           	opt stack 0
   649                           tblptru	equ	0xFF8
   650                           tblptrh	equ	0xFF7
   651                           tblptrl	equ	0xFF6
   652                           tablat	equ	0xFF5
   653                           prodh	equ	0xFF4
   654                           prodl	equ	0xFF3
   655                           status	equ	0xFD8
   656                           
   657 ;; *************** function _ssdInit *****************
   658 ;; Defined at:
   659 ;;		line 93 in file "ssd.c"
   660 ;; Parameters:    Size  Location     Type
   661 ;;		None
   662 ;; Auto vars:     Size  Location     Type
   663 ;;		None
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      void 
   666 ;; Registers used:
   667 ;;		wreg, status,2, status,0
   668 ;; Tracked objects:
   669 ;;		On entry : 0/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   673 ;;      Params:         0       0       0       0       0       0       0
   674 ;;      Locals:         0       0       0       0       0       0       0
   675 ;;      Temps:          0       0       0       0       0       0       0
   676 ;;      Totals:         0       0       0       0       0       0       0
   677 ;;Total ram usage:        0 bytes
   678 ;; Hardware stack levels used:    1
   679 ;; This function calls:
   680 ;;		Nothing
   681 ;; This function is called by:
   682 ;;		_main
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text2
   687  000BEC                     __ptext2:
   688                           	opt stack 0
   689  000BEC                     _ssdInit:
   690                           	opt stack 30
   691                           
   692                           ;ssd.c: 96: (((*(volatile __near unsigned char*)0xF92)) &= ~(1<<2));
   693                           
   694                           ;incstack = 0
   695  000BEC  9492               	bcf	3986,2,c	;volatile
   696                           
   697                           ;ssd.c: 97: (((*(volatile __near unsigned char*)0xF92)) &= ~(1<<5));
   698  000BEE  9A92               	bcf	3986,5,c	;volatile
   699                           
   700                           ;ssd.c: 98: (((*(volatile __near unsigned char*)0xF96)) &= ~(1<<0));
   701  000BF0  9096               	bcf	3990,0,c	;volatile
   702                           
   703                           ;ssd.c: 99: (((*(volatile __near unsigned char*)0xF96)) &= ~(1<<2));
   704  000BF2  9496               	bcf	3990,2,c	;volatile
   705                           
   706                           ;ssd.c: 100: (*(volatile __near unsigned char*)0xFC1) = 0x0E;
   707  000BF4  0E0E               	movlw	14
   708  000BF6  6EC1               	movwf	4033,c	;volatile
   709                           
   710                           ;ssd.c: 101: (*(volatile __near unsigned char*)0xF95) = 0x00;
   711  000BF8  0E00               	movlw	0
   712  000BFA  6E95               	movwf	3989,c	;volatile
   713  000BFC  0012               	return		;funcret
   714  000BFE                     __end_of_ssdInit:
   715                           	opt stack 0
   716                           tblptru	equ	0xFF8
   717                           tblptrh	equ	0xFF7
   718                           tblptrl	equ	0xFF6
   719                           tablat	equ	0xFF5
   720                           prodh	equ	0xFF4
   721                           prodl	equ	0xFF3
   722                           status	equ	0xFD8
   723                           
   724 ;; *************** function _ssdDigit *****************
   725 ;; Defined at:
   726 ;;		line 31 in file "ssd.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;  val             1    wreg     unsigned char 
   729 ;;  pos             1   12[COMRAM] unsigned char 
   730 ;; Auto vars:     Size  Location     Type
   731 ;;  val             1   13[COMRAM] unsigned char 
   732 ;; Return value:  Size  Location     Type
   733 ;;                  1    wreg      void 
   734 ;; Registers used:
   735 ;;		wreg, status,2, status,0
   736 ;; Tracked objects:
   737 ;;		On entry : 0/0
   738 ;;		On exit  : 0/0
   739 ;;		Unchanged: 0/0
   740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   741 ;;      Params:         1       0       0       0       0       0       0
   742 ;;      Locals:         1       0       0       0       0       0       0
   743 ;;      Temps:          0       0       0       0       0       0       0
   744 ;;      Totals:         2       0       0       0       0       0       0
   745 ;;Total ram usage:        2 bytes
   746 ;; Hardware stack levels used:    1
   747 ;; This function calls:
   748 ;;		Nothing
   749 ;; This function is called by:
   750 ;;		_main
   751 ;; This function uses a non-reentrant model
   752 ;;
   753                           
   754                           	psect	text3
   755  000BAE                     __ptext3:
   756                           	opt stack 0
   757  000BAE                     _ssdDigit:
   758                           	opt stack 30
   759                           
   760                           ;incstack = 0
   761                           ;ssdDigit@val stored from wreg
   762  000BAE  6E0E               	movwf	ssdDigit@val,c
   763                           
   764                           ;ssd.c: 33: if (pos == 0)
   765  000BB0  500D               	movf	ssdDigit@pos,w,c
   766  000BB2  B4D8               	btfsc	status,2,c
   767                           
   768                           ;ssd.c: 34: {
   769                           ;ssd.c: 35: v0 = val;
   770  000BB4  C00E  F01D         	movff	ssdDigit@val,_v0
   771                           
   772                           ;ssd.c: 36: }
   773                           ;ssd.c: 37: if (pos == 1)
   774  000BB8  040D               	decf	ssdDigit@pos,w,c
   775  000BBA  B4D8               	btfsc	status,2,c
   776                           
   777                           ;ssd.c: 38: {
   778                           ;ssd.c: 39: v1 = val;
   779  000BBC  C00E  F01C         	movff	ssdDigit@val,_v1
   780                           
   781                           ;ssd.c: 40: }
   782                           ;ssd.c: 41: if (pos == 2)
   783  000BC0  0E02               	movlw	2
   784  000BC2  180D               	xorwf	ssdDigit@pos,w,c
   785  000BC4  B4D8               	btfsc	status,2,c
   786                           
   787                           ;ssd.c: 42: {
   788                           ;ssd.c: 43: v2 = val;
   789  000BC6  C00E  F01B         	movff	ssdDigit@val,_v2
   790                           
   791                           ;ssd.c: 44: }
   792                           ;ssd.c: 45: if (pos == 3)
   793  000BCA  0E03               	movlw	3
   794  000BCC  180D               	xorwf	ssdDigit@pos,w,c
   795  000BCE  A4D8               	btfss	status,2,c
   796  000BD0  0012               	return	
   797                           
   798                           ;ssd.c: 46: {
   799                           ;ssd.c: 47: v3 = val;
   800  000BD2  C00E  F01A         	movff	ssdDigit@val,_v3
   801  000BD6  0012               	return	
   802  000BD8                     __end_of_ssdDigit:
   803                           	opt stack 0
   804                           tblptru	equ	0xFF8
   805                           tblptrh	equ	0xFF7
   806                           tblptrl	equ	0xFF6
   807                           tablat	equ	0xFF5
   808                           prodh	equ	0xFF4
   809                           prodl	equ	0xFF3
   810                           status	equ	0xFD8
   811                           
   812 ;; *************** function ___lwmod *****************
   813 ;; Defined at:
   814 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
   815 ;; Parameters:    Size  Location     Type
   816 ;;  dividend        2    7[COMRAM] unsigned int 
   817 ;;  divisor         2    9[COMRAM] unsigned int 
   818 ;; Auto vars:     Size  Location     Type
   819 ;;  counter         1   11[COMRAM] unsigned char 
   820 ;; Return value:  Size  Location     Type
   821 ;;                  2    7[COMRAM] unsigned int 
   822 ;; Registers used:
   823 ;;		wreg, status,2, status,0
   824 ;; Tracked objects:
   825 ;;		On entry : 0/0
   826 ;;		On exit  : 0/0
   827 ;;		Unchanged: 0/0
   828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   829 ;;      Params:         4       0       0       0       0       0       0
   830 ;;      Locals:         1       0       0       0       0       0       0
   831 ;;      Temps:          0       0       0       0       0       0       0
   832 ;;      Totals:         5       0       0       0       0       0       0
   833 ;;Total ram usage:        5 bytes
   834 ;; Hardware stack levels used:    1
   835 ;; This function calls:
   836 ;;		Nothing
   837 ;; This function is called by:
   838 ;;		_main
   839 ;; This function uses a non-reentrant model
   840 ;;
   841                           
   842                           	psect	text4
   843  000B6C                     __ptext4:
   844                           	opt stack 0
   845  000B6C                     ___lwmod:
   846                           	opt stack 30
   847                           
   848                           ;incstack = 0
   849  000B6C  500A               	movf	___lwmod@divisor,w,c
   850  000B6E  100B               	iorwf	___lwmod@divisor+1,w,c
   851  000B70  B4D8               	btfsc	status,2,c
   852  000B72  D018               	goto	l468
   853  000B74  0E01               	movlw	1
   854  000B76  6E0C               	movwf	___lwmod@counter,c
   855  000B78  D004               	goto	l463
   856  000B7A  90D8               	bcf	status,0,c
   857  000B7C  360A               	rlcf	___lwmod@divisor,f,c
   858  000B7E  360B               	rlcf	___lwmod@divisor+1,f,c
   859  000B80  2A0C               	incf	___lwmod@counter,f,c
   860  000B82                     l463:
   861  000B82  AE0B               	btfss	___lwmod@divisor+1,7,c
   862  000B84  D7FA               	goto	l464
   863  000B86                     u870:
   864  000B86  500A               	movf	___lwmod@divisor,w,c
   865  000B88  5C08               	subwf	___lwmod@dividend,w,c
   866  000B8A  500B               	movf	___lwmod@divisor+1,w,c
   867  000B8C  5809               	subwfb	___lwmod@dividend+1,w,c
   868  000B8E  A0D8               	btfss	status,0,c
   869  000B90  D004               	goto	l467
   870  000B92  500A               	movf	___lwmod@divisor,w,c
   871  000B94  5E08               	subwf	___lwmod@dividend,f,c
   872  000B96  500B               	movf	___lwmod@divisor+1,w,c
   873  000B98  5A09               	subwfb	___lwmod@dividend+1,f,c
   874  000B9A                     l467:
   875  000B9A  90D8               	bcf	status,0,c
   876  000B9C  320B               	rrcf	___lwmod@divisor+1,f,c
   877  000B9E  320A               	rrcf	___lwmod@divisor,f,c
   878  000BA0  2E0C               	decfsz	___lwmod@counter,f,c
   879  000BA2  D7F1               	goto	u870
   880  000BA4                     l468:
   881  000BA4  C008  F008         	movff	___lwmod@dividend,?___lwmod
   882  000BA8  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
   883  000BAC  0012               	return		;funcret
   884  000BAE                     __end_of___lwmod:
   885                           	opt stack 0
   886                           tblptru	equ	0xFF8
   887                           tblptrh	equ	0xFF7
   888                           tblptrl	equ	0xFF6
   889                           tablat	equ	0xFF5
   890                           prodh	equ	0xFF4
   891                           prodl	equ	0xFF3
   892                           status	equ	0xFD8
   893                           
   894 ;; *************** function ___lwdiv *****************
   895 ;; Defined at:
   896 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;  dividend        2    0[COMRAM] unsigned int 
   899 ;;  divisor         2    2[COMRAM] unsigned int 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  quotient        2    4[COMRAM] unsigned int 
   902 ;;  counter         1    6[COMRAM] unsigned char 
   903 ;; Return value:  Size  Location     Type
   904 ;;                  2    0[COMRAM] unsigned int 
   905 ;; Registers used:
   906 ;;		wreg, status,2, status,0
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   912 ;;      Params:         4       0       0       0       0       0       0
   913 ;;      Locals:         3       0       0       0       0       0       0
   914 ;;      Temps:          0       0       0       0       0       0       0
   915 ;;      Totals:         7       0       0       0       0       0       0
   916 ;;Total ram usage:        7 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; This function calls:
   919 ;;		Nothing
   920 ;; This function is called by:
   921 ;;		_main
   922 ;; This function uses a non-reentrant model
   923 ;;
   924                           
   925                           	psect	text5
   926  000B1A                     __ptext5:
   927                           	opt stack 0
   928  000B1A                     ___lwdiv:
   929                           	opt stack 30
   930                           
   931                           ;incstack = 0
   932  000B1A  0E00               	movlw	0
   933  000B1C  6E06               	movwf	___lwdiv@quotient+1,c
   934  000B1E  0E00               	movlw	0
   935  000B20  6E05               	movwf	___lwdiv@quotient,c
   936  000B22  5003               	movf	___lwdiv@divisor,w,c
   937  000B24  1004               	iorwf	___lwdiv@divisor+1,w,c
   938  000B26  B4D8               	btfsc	status,2,c
   939  000B28  D01C               	goto	l458
   940  000B2A  0E01               	movlw	1
   941  000B2C  6E07               	movwf	___lwdiv@counter,c
   942  000B2E  D004               	goto	l453
   943  000B30  90D8               	bcf	status,0,c
   944  000B32  3603               	rlcf	___lwdiv@divisor,f,c
   945  000B34  3604               	rlcf	___lwdiv@divisor+1,f,c
   946  000B36  2A07               	incf	___lwdiv@counter,f,c
   947  000B38                     l453:
   948  000B38  AE04               	btfss	___lwdiv@divisor+1,7,c
   949  000B3A  D7FA               	goto	l454
   950  000B3C                     u840:
   951  000B3C  90D8               	bcf	status,0,c
   952  000B3E  3605               	rlcf	___lwdiv@quotient,f,c
   953  000B40  3606               	rlcf	___lwdiv@quotient+1,f,c
   954  000B42  5003               	movf	___lwdiv@divisor,w,c
   955  000B44  5C01               	subwf	___lwdiv@dividend,w,c
   956  000B46  5004               	movf	___lwdiv@divisor+1,w,c
   957  000B48  5802               	subwfb	___lwdiv@dividend+1,w,c
   958  000B4A  A0D8               	btfss	status,0,c
   959  000B4C  D005               	goto	l457
   960  000B4E  5003               	movf	___lwdiv@divisor,w,c
   961  000B50  5E01               	subwf	___lwdiv@dividend,f,c
   962  000B52  5004               	movf	___lwdiv@divisor+1,w,c
   963  000B54  5A02               	subwfb	___lwdiv@dividend+1,f,c
   964  000B56  8005               	bsf	___lwdiv@quotient,0,c
   965  000B58                     l457:
   966  000B58  90D8               	bcf	status,0,c
   967  000B5A  3204               	rrcf	___lwdiv@divisor+1,f,c
   968  000B5C  3203               	rrcf	___lwdiv@divisor,f,c
   969  000B5E  2E07               	decfsz	___lwdiv@counter,f,c
   970  000B60  D7ED               	goto	u840
   971  000B62                     l458:
   972  000B62  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
   973  000B66  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
   974  000B6A  0012               	return		;funcret
   975  000B6C                     __end_of___lwdiv:
   976                           	opt stack 0
   977                           tblptru	equ	0xFF8
   978                           tblptrh	equ	0xFF7
   979                           tblptrl	equ	0xFF6
   980                           tablat	equ	0xFF5
   981                           prodh	equ	0xFF4
   982                           prodl	equ	0xFF3
   983                           status	equ	0xFD8
   984                           
   985 ;; *************** function ___ftge *****************
   986 ;; Defined at:
   987 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;  ff1             3    0[COMRAM] float 
   990 ;;  ff2             3    3[COMRAM] float 
   991 ;; Auto vars:     Size  Location     Type
   992 ;;		None
   993 ;; Return value:  Size  Location     Type
   994 ;;		None               void
   995 ;; Registers used:
   996 ;;		wreg, status,2, status,0
   997 ;; Tracked objects:
   998 ;;		On entry : 0/0
   999 ;;		On exit  : 0/0
  1000 ;;		Unchanged: 0/0
  1001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1002 ;;      Params:         6       0       0       0       0       0       0
  1003 ;;      Locals:         0       0       0       0       0       0       0
  1004 ;;      Temps:          3       0       0       0       0       0       0
  1005 ;;      Totals:         9       0       0       0       0       0       0
  1006 ;;Total ram usage:        9 bytes
  1007 ;; Hardware stack levels used:    1
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_main
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text6
  1016  000A8A                     __ptext6:
  1017                           	opt stack 0
  1018  000A8A                     ___ftge:
  1019                           	opt stack 30
  1020                           
  1021                           ;incstack = 0
  1022  000A8A  AE03               	btfss	___ftge@ff1+2,7,c
  1023  000A8C  D016               	goto	l336
  1024  000A8E  C001  F007         	movff	___ftge@ff1,??___ftge
  1025  000A92  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  1026  000A96  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  1027  000A9A  1E07               	comf	??___ftge,f,c
  1028  000A9C  1E08               	comf	??___ftge+1,f,c
  1029  000A9E  1E09               	comf	??___ftge+2,f,c
  1030  000AA0  2A07               	incf	??___ftge,f,c
  1031  000AA2  0E00               	movlw	0
  1032  000AA4  2208               	addwfc	??___ftge+1,f,c
  1033  000AA6  2209               	addwfc	??___ftge+2,f,c
  1034  000AA8  0E00               	movlw	0
  1035  000AAA  2407               	addwf	??___ftge,w,c
  1036  000AAC  6E01               	movwf	___ftge@ff1,c
  1037  000AAE  0E00               	movlw	0
  1038  000AB0  2008               	addwfc	??___ftge+1,w,c
  1039  000AB2  6E02               	movwf	___ftge@ff1+1,c
  1040  000AB4  0E80               	movlw	128
  1041  000AB6  2009               	addwfc	??___ftge+2,w,c
  1042  000AB8  6E03               	movwf	___ftge@ff1+2,c
  1043  000ABA                     l336:
  1044  000ABA  AE06               	btfss	___ftge@ff2+2,7,c
  1045  000ABC  D016               	goto	l337
  1046  000ABE  C004  F007         	movff	___ftge@ff2,??___ftge
  1047  000AC2  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  1048  000AC6  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  1049  000ACA  1E07               	comf	??___ftge,f,c
  1050  000ACC  1E08               	comf	??___ftge+1,f,c
  1051  000ACE  1E09               	comf	??___ftge+2,f,c
  1052  000AD0  2A07               	incf	??___ftge,f,c
  1053  000AD2  0E00               	movlw	0
  1054  000AD4  2208               	addwfc	??___ftge+1,f,c
  1055  000AD6  2209               	addwfc	??___ftge+2,f,c
  1056  000AD8  0E00               	movlw	0
  1057  000ADA  2407               	addwf	??___ftge,w,c
  1058  000ADC  6E04               	movwf	___ftge@ff2,c
  1059  000ADE  0E00               	movlw	0
  1060  000AE0  2008               	addwfc	??___ftge+1,w,c
  1061  000AE2  6E05               	movwf	___ftge@ff2+1,c
  1062  000AE4  0E80               	movlw	128
  1063  000AE6  2009               	addwfc	??___ftge+2,w,c
  1064  000AE8  6E06               	movwf	___ftge@ff2+2,c
  1065  000AEA                     l337:
  1066  000AEA  0E00               	movlw	0
  1067  000AEC  1A01               	xorwf	___ftge@ff1,f,c
  1068  000AEE  0E00               	movlw	0
  1069  000AF0  1A02               	xorwf	___ftge@ff1+1,f,c
  1070  000AF2  0E80               	movlw	128
  1071  000AF4  1A03               	xorwf	___ftge@ff1+2,f,c
  1072  000AF6  0E00               	movlw	0
  1073  000AF8  1A04               	xorwf	___ftge@ff2,f,c
  1074  000AFA  0E00               	movlw	0
  1075  000AFC  1A05               	xorwf	___ftge@ff2+1,f,c
  1076  000AFE  0E80               	movlw	128
  1077  000B00  1A06               	xorwf	___ftge@ff2+2,f,c
  1078  000B02  5004               	movf	___ftge@ff2,w,c
  1079  000B04  5C01               	subwf	___ftge@ff1,w,c
  1080  000B06  5005               	movf	___ftge@ff2+1,w,c
  1081  000B08  5802               	subwfb	___ftge@ff1+1,w,c
  1082  000B0A  5006               	movf	___ftge@ff2+2,w,c
  1083  000B0C  5803               	subwfb	___ftge@ff1+2,w,c
  1084  000B0E  B0D8               	btfsc	status,0,c
  1085  000B10  D002               	goto	l931
  1086  000B12  90D8               	bcf	status,0,c
  1087  000B14  0012               	return	
  1088  000B16                     l931:
  1089  000B16  80D8               	bsf	status,0,c
  1090  000B18  0012               	return	
  1091  000B1A                     __end_of___ftge:
  1092                           	opt stack 0
  1093                           tblptru	equ	0xFF8
  1094                           tblptrh	equ	0xFF7
  1095                           tblptrl	equ	0xFF6
  1096                           tablat	equ	0xFF5
  1097                           prodh	equ	0xFF4
  1098                           prodl	equ	0xFF3
  1099                           status	equ	0xFD8
  1100                           
  1101 ;; *************** function ___ftadd *****************
  1102 ;; Defined at:
  1103 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;  f1              3    8[COMRAM] float 
  1106 ;;  f2              3   11[COMRAM] float 
  1107 ;; Auto vars:     Size  Location     Type
  1108 ;;  exp1            1   19[COMRAM] unsigned char 
  1109 ;;  exp2            1   18[COMRAM] unsigned char 
  1110 ;;  sign            1   17[COMRAM] unsigned char 
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  3    8[COMRAM] float 
  1113 ;; Registers used:
  1114 ;;		wreg, status,2, status,0, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : 0/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1120 ;;      Params:         6       0       0       0       0       0       0
  1121 ;;      Locals:         3       0       0       0       0       0       0
  1122 ;;      Temps:          3       0       0       0       0       0       0
  1123 ;;      Totals:        12       0       0       0       0       0       0
  1124 ;;Total ram usage:       12 bytes
  1125 ;; Hardware stack levels used:    1
  1126 ;; Hardware stack levels required when called:    1
  1127 ;; This function calls:
  1128 ;;		___ftpack
  1129 ;; This function is called by:
  1130 ;;		_main
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           	psect	text7
  1135  000612                     __ptext7:
  1136                           	opt stack 0
  1137  000612                     ___ftadd:
  1138                           	opt stack 29
  1139                           
  1140                           ;incstack = 0
  1141  000612  C00B  F00F         	movff	___ftadd@f1+2,??___ftadd
  1142  000616  6A10               	clrf	(??___ftadd+1)& (0+255),c
  1143  000618  6A11               	clrf	(??___ftadd+2)& (0+255),c
  1144  00061A  340A               	rlcf	___ftadd@f1+1,w,c
  1145  00061C  360F               	rlcf	??___ftadd& (0+255),f,c
  1146  00061E  E301               	bnc	u591
  1147  000620  8010               	bsf	(??___ftadd+1)& (0+255),0,c
  1148  000622                     u591:
  1149  000622  500F               	movf	??___ftadd,w,c
  1150  000624  6E14               	movwf	___ftadd@exp1,c
  1151  000626  C00E  F00F         	movff	___ftadd@f2+2,??___ftadd
  1152  00062A  6A10               	clrf	(??___ftadd+1)& (0+255),c
  1153  00062C  6A11               	clrf	(??___ftadd+2)& (0+255),c
  1154  00062E  340D               	rlcf	___ftadd@f2+1,w,c
  1155  000630  360F               	rlcf	??___ftadd& (0+255),f,c
  1156  000632  E301               	bnc	u601
  1157  000634  8010               	bsf	(??___ftadd+1)& (0+255),0,c
  1158  000636                     u601:
  1159  000636  500F               	movf	??___ftadd,w,c
  1160  000638  6E13               	movwf	___ftadd@exp2,c
  1161  00063A  5014               	movf	___ftadd@exp1,w,c
  1162  00063C  B4D8               	btfsc	status,2,c
  1163  00063E  D00B               	goto	u630
  1164  000640  5013               	movf	___ftadd@exp2,w,c
  1165  000642  5C14               	subwf	___ftadd@exp1,w,c
  1166  000644  B0D8               	btfsc	status,0,c
  1167  000646  D00E               	goto	l295
  1168  000648  5014               	movf	___ftadd@exp1,w,c
  1169  00064A  0800               	sublw	0
  1170  00064C  2413               	addwf	___ftadd@exp2,w,c
  1171  00064E  6E0F               	movwf	??___ftadd& (0+255),c
  1172  000650  0E18               	movlw	24
  1173  000652  640F               	cpfsgt	??___ftadd,c
  1174  000654  D007               	goto	l295
  1175  000656                     u630:
  1176  000656  C00C  F009         	movff	___ftadd@f2,?___ftadd
  1177  00065A  C00D  F00A         	movff	___ftadd@f2+1,?___ftadd+1
  1178  00065E  C00E  F00B         	movff	___ftadd@f2+2,?___ftadd+2
  1179  000662  0012               	return	
  1180  000664                     l295:
  1181  000664  5013               	movf	___ftadd@exp2,w,c
  1182  000666  B4D8               	btfsc	status,2,c
  1183  000668  D00B               	goto	u660
  1184  00066A  5014               	movf	___ftadd@exp1,w,c
  1185  00066C  5C13               	subwf	___ftadd@exp2,w,c
  1186  00066E  B0D8               	btfsc	status,0,c
  1187  000670  D00E               	goto	l299
  1188  000672  5013               	movf	___ftadd@exp2,w,c
  1189  000674  0800               	sublw	0
  1190  000676  2414               	addwf	___ftadd@exp1,w,c
  1191  000678  6E0F               	movwf	??___ftadd& (0+255),c
  1192  00067A  0E18               	movlw	24
  1193  00067C  640F               	cpfsgt	??___ftadd,c
  1194  00067E  D007               	goto	l299
  1195  000680                     u660:
  1196  000680  C009  F009         	movff	___ftadd@f1,?___ftadd
  1197  000684  C00A  F00A         	movff	___ftadd@f1+1,?___ftadd+1
  1198  000688  C00B  F00B         	movff	___ftadd@f1+2,?___ftadd+2
  1199  00068C  0012               	return	
  1200  00068E                     l299:
  1201  00068E  0E06               	movlw	6
  1202  000690  6E12               	movwf	___ftadd@sign,c
  1203  000692  BE0B               	btfsc	___ftadd@f1+2,7,c
  1204  000694  8E12               	bsf	___ftadd@sign,7,c
  1205  000696  BE0E               	btfsc	___ftadd@f2+2,7,c
  1206  000698  8C12               	bsf	___ftadd@sign,6,c
  1207  00069A  8E0A               	bsf	___ftadd@f1+1,7,c
  1208  00069C  0EFF               	movlw	255
  1209  00069E  1609               	andwf	___ftadd@f1,f,c
  1210  0006A0  0EFF               	movlw	255
  1211  0006A2  160A               	andwf	___ftadd@f1+1,f,c
  1212  0006A4  0E00               	movlw	0
  1213  0006A6  160B               	andwf	___ftadd@f1+2,f,c
  1214  0006A8  8E0D               	bsf	___ftadd@f2+1,7,c
  1215  0006AA  0EFF               	movlw	255
  1216  0006AC  160C               	andwf	___ftadd@f2,f,c
  1217  0006AE  0EFF               	movlw	255
  1218  0006B0  160D               	andwf	___ftadd@f2+1,f,c
  1219  0006B2  0E00               	movlw	0
  1220  0006B4  160E               	andwf	___ftadd@f2+2,f,c
  1221  0006B6  5013               	movf	___ftadd@exp2,w,c
  1222  0006B8  5C14               	subwf	___ftadd@exp1,w,c
  1223  0006BA  B0D8               	btfsc	status,0,c
  1224  0006BC  D01B               	goto	l304
  1225  0006BE                     u690:
  1226  0006BE  90D8               	bcf	status,0,c
  1227  0006C0  360C               	rlcf	___ftadd@f2,f,c
  1228  0006C2  360D               	rlcf	___ftadd@f2+1,f,c
  1229  0006C4  360E               	rlcf	___ftadd@f2+2,f,c
  1230  0006C6  0613               	decf	___ftadd@exp2,f,c
  1231  0006C8  5014               	movf	___ftadd@exp1,w,c
  1232  0006CA  1813               	xorwf	___ftadd@exp2,w,c
  1233  0006CC  B4D8               	btfsc	status,2,c
  1234  0006CE  D00D               	goto	l309
  1235  0006D0  0612               	decf	___ftadd@sign,f,c
  1236  0006D2  C012  F00F         	movff	___ftadd@sign,??___ftadd
  1237  0006D6  0E07               	movlw	7
  1238  0006D8  160F               	andwf	??___ftadd,f,c
  1239  0006DA  B4D8               	btfsc	status,2,c
  1240  0006DC  D006               	goto	l309
  1241  0006DE  D7EF               	goto	u690
  1242  0006E0  90D8               	bcf	status,0,c
  1243  0006E2  320B               	rrcf	___ftadd@f1+2,f,c
  1244  0006E4  320A               	rrcf	___ftadd@f1+1,f,c
  1245  0006E6  3209               	rrcf	___ftadd@f1,f,c
  1246  0006E8  2A14               	incf	___ftadd@exp1,f,c
  1247  0006EA                     l309:
  1248  0006EA  5013               	movf	___ftadd@exp2,w,c
  1249  0006EC  1814               	xorwf	___ftadd@exp1,w,c
  1250  0006EE  B4D8               	btfsc	status,2,c
  1251  0006F0  D01F               	goto	u760
  1252  0006F2  D7F6               	goto	l310
  1253  0006F4                     l304:
  1254  0006F4  5014               	movf	___ftadd@exp1,w,c
  1255  0006F6  5C13               	subwf	___ftadd@exp2,w,c
  1256  0006F8  B0D8               	btfsc	status,0,c
  1257  0006FA  D01A               	goto	u760
  1258  0006FC                     u730:
  1259  0006FC  90D8               	bcf	status,0,c
  1260  0006FE  3609               	rlcf	___ftadd@f1,f,c
  1261  000700  360A               	rlcf	___ftadd@f1+1,f,c
  1262  000702  360B               	rlcf	___ftadd@f1+2,f,c
  1263  000704  0614               	decf	___ftadd@exp1,f,c
  1264  000706  5014               	movf	___ftadd@exp1,w,c
  1265  000708  1813               	xorwf	___ftadd@exp2,w,c
  1266  00070A  B4D8               	btfsc	status,2,c
  1267  00070C  D00D               	goto	l318
  1268  00070E  0612               	decf	___ftadd@sign,f,c
  1269  000710  C012  F00F         	movff	___ftadd@sign,??___ftadd
  1270  000714  0E07               	movlw	7
  1271  000716  160F               	andwf	??___ftadd,f,c
  1272  000718  B4D8               	btfsc	status,2,c
  1273  00071A  D006               	goto	l318
  1274  00071C  D7EF               	goto	u730
  1275  00071E  90D8               	bcf	status,0,c
  1276  000720  320E               	rrcf	___ftadd@f2+2,f,c
  1277  000722  320D               	rrcf	___ftadd@f2+1,f,c
  1278  000724  320C               	rrcf	___ftadd@f2,f,c
  1279  000726  2A13               	incf	___ftadd@exp2,f,c
  1280  000728                     l318:
  1281  000728  5013               	movf	___ftadd@exp2,w,c
  1282  00072A  1814               	xorwf	___ftadd@exp1,w,c
  1283  00072C  A4D8               	btfss	status,2,c
  1284  00072E  D7F7               	goto	l319
  1285  000730                     u760:
  1286  000730  AE12               	btfss	___ftadd@sign,7,c
  1287  000732  D00C               	goto	l321
  1288  000734  0EFF               	movlw	255
  1289  000736  1A09               	xorwf	___ftadd@f1,f,c
  1290  000738  0EFF               	movlw	255
  1291  00073A  1A0A               	xorwf	___ftadd@f1+1,f,c
  1292  00073C  0EFF               	movlw	255
  1293  00073E  1A0B               	xorwf	___ftadd@f1+2,f,c
  1294  000740  0E01               	movlw	1
  1295  000742  2609               	addwf	___ftadd@f1,f,c
  1296  000744  0E00               	movlw	0
  1297  000746  220A               	addwfc	___ftadd@f1+1,f,c
  1298  000748  0E00               	movlw	0
  1299  00074A  220B               	addwfc	___ftadd@f1+2,f,c
  1300  00074C                     l321:
  1301  00074C  AC12               	btfss	___ftadd@sign,6,c
  1302  00074E  D00C               	goto	l322
  1303  000750  0EFF               	movlw	255
  1304  000752  1A0C               	xorwf	___ftadd@f2,f,c
  1305  000754  0EFF               	movlw	255
  1306  000756  1A0D               	xorwf	___ftadd@f2+1,f,c
  1307  000758  0EFF               	movlw	255
  1308  00075A  1A0E               	xorwf	___ftadd@f2+2,f,c
  1309  00075C  0E01               	movlw	1
  1310  00075E  260C               	addwf	___ftadd@f2,f,c
  1311  000760  0E00               	movlw	0
  1312  000762  220D               	addwfc	___ftadd@f2+1,f,c
  1313  000764  0E00               	movlw	0
  1314  000766  220E               	addwfc	___ftadd@f2+2,f,c
  1315  000768                     l322:
  1316  000768  0E00               	movlw	0
  1317  00076A  6E12               	movwf	___ftadd@sign,c
  1318  00076C  5009               	movf	___ftadd@f1,w,c
  1319  00076E  260C               	addwf	___ftadd@f2,f,c
  1320  000770  500A               	movf	___ftadd@f1+1,w,c
  1321  000772  220D               	addwfc	___ftadd@f2+1,f,c
  1322  000774  500B               	movf	___ftadd@f1+2,w,c
  1323  000776  220E               	addwfc	___ftadd@f2+2,f,c
  1324  000778  AE0E               	btfss	___ftadd@f2+2,7,c
  1325  00077A  D00E               	goto	l323
  1326  00077C  0EFF               	movlw	255
  1327  00077E  1A0C               	xorwf	___ftadd@f2,f,c
  1328  000780  0EFF               	movlw	255
  1329  000782  1A0D               	xorwf	___ftadd@f2+1,f,c
  1330  000784  0EFF               	movlw	255
  1331  000786  1A0E               	xorwf	___ftadd@f2+2,f,c
  1332  000788  0E01               	movlw	1
  1333  00078A  260C               	addwf	___ftadd@f2,f,c
  1334  00078C  0E00               	movlw	0
  1335  00078E  220D               	addwfc	___ftadd@f2+1,f,c
  1336  000790  0E00               	movlw	0
  1337  000792  220E               	addwfc	___ftadd@f2+2,f,c
  1338  000794  0E01               	movlw	1
  1339  000796  6E12               	movwf	___ftadd@sign,c
  1340  000798                     l323:
  1341  000798  C00C  F001         	movff	___ftadd@f2,___ftpack@arg
  1342  00079C  C00D  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  1343  0007A0  C00E  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  1344  0007A4  C014  F004         	movff	___ftadd@exp1,___ftpack@exp
  1345  0007A8  C012  F005         	movff	___ftadd@sign,___ftpack@sign
  1346  0007AC  EC9A  F004         	call	___ftpack	;wreg free
  1347  0007B0  C001  F009         	movff	?___ftpack,?___ftadd
  1348  0007B4  C002  F00A         	movff	?___ftpack+1,?___ftadd+1
  1349  0007B8  C003  F00B         	movff	?___ftpack+2,?___ftadd+2
  1350  0007BC  0012               	return	
  1351  0007BE                     __end_of___ftadd:
  1352                           	opt stack 0
  1353                           tblptru	equ	0xFF8
  1354                           tblptrh	equ	0xFF7
  1355                           tblptrl	equ	0xFF6
  1356                           tablat	equ	0xFF5
  1357                           prodh	equ	0xFF4
  1358                           prodl	equ	0xFF3
  1359                           status	equ	0xFD8
  1360                           
  1361 ;; *************** function ___ftpack *****************
  1362 ;; Defined at:
  1363 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  arg             3    0[COMRAM] unsigned um
  1366 ;;  exp             1    3[COMRAM] unsigned char 
  1367 ;;  sign            1    4[COMRAM] unsigned char 
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;		None
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  3    0[COMRAM] float 
  1372 ;; Registers used:
  1373 ;;		wreg, status,2, status,0
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1379 ;;      Params:         5       0       0       0       0       0       0
  1380 ;;      Locals:         0       0       0       0       0       0       0
  1381 ;;      Temps:          3       0       0       0       0       0       0
  1382 ;;      Totals:         8       0       0       0       0       0       0
  1383 ;;Total ram usage:        8 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; This function calls:
  1386 ;;		Nothing
  1387 ;; This function is called by:
  1388 ;;		___ftadd
  1389 ;; This function uses a non-reentrant model
  1390 ;;
  1391                           
  1392                           	psect	text8
  1393  000934                     __ptext8:
  1394                           	opt stack 0
  1395  000934                     ___ftpack:
  1396                           	opt stack 29
  1397                           
  1398                           ;incstack = 0
  1399  000934  5004               	movf	___ftpack@exp,w,c
  1400  000936  B4D8               	btfsc	status,2,c
  1401  000938  D005               	goto	u480
  1402  00093A  5001               	movf	___ftpack@arg,w,c
  1403  00093C  1002               	iorwf	___ftpack@arg+1,w,c
  1404  00093E  1003               	iorwf	___ftpack@arg+2,w,c
  1405  000940  A4D8               	btfss	status,2,c
  1406  000942  D00C               	goto	l264
  1407  000944                     u480:
  1408  000944  0E00               	movlw	0
  1409  000946  6E01               	movwf	?___ftpack,c
  1410  000948  0E00               	movlw	0
  1411  00094A  6E02               	movwf	?___ftpack+1,c
  1412  00094C  0E00               	movlw	0
  1413  00094E  6E03               	movwf	?___ftpack+2,c
  1414  000950  0012               	return	
  1415  000952  2A04               	incf	___ftpack@exp,f,c
  1416  000954  90D8               	bcf	status,0,c
  1417  000956  3203               	rrcf	___ftpack@arg+2,f,c
  1418  000958  3202               	rrcf	___ftpack@arg+1,f,c
  1419  00095A  3201               	rrcf	___ftpack@arg,f,c
  1420  00095C                     l264:
  1421  00095C  0E00               	movlw	0
  1422  00095E  1401               	andwf	___ftpack@arg,w,c
  1423  000960  6E06               	movwf	??___ftpack& (0+255),c
  1424  000962  0E00               	movlw	0
  1425  000964  1402               	andwf	___ftpack@arg+1,w,c
  1426  000966  6E07               	movwf	(??___ftpack+1)& (0+255),c
  1427  000968  0EFE               	movlw	254
  1428  00096A  1403               	andwf	___ftpack@arg+2,w,c
  1429  00096C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  1430  00096E  5006               	movf	??___ftpack,w,c
  1431  000970  1007               	iorwf	??___ftpack+1,w,c
  1432  000972  1008               	iorwf	??___ftpack+2,w,c
  1433  000974  B4D8               	btfsc	status,2,c
  1434  000976  D00C               	goto	l267
  1435  000978  D7EC               	goto	l265
  1436  00097A  2A04               	incf	___ftpack@exp,f,c
  1437  00097C  0E01               	movlw	1
  1438  00097E  2601               	addwf	___ftpack@arg,f,c
  1439  000980  0E00               	movlw	0
  1440  000982  2202               	addwfc	___ftpack@arg+1,f,c
  1441  000984  0E00               	movlw	0
  1442  000986  2203               	addwfc	___ftpack@arg+2,f,c
  1443  000988  90D8               	bcf	status,0,c
  1444  00098A  3203               	rrcf	___ftpack@arg+2,f,c
  1445  00098C  3202               	rrcf	___ftpack@arg+1,f,c
  1446  00098E  3201               	rrcf	___ftpack@arg,f,c
  1447  000990                     l267:
  1448  000990  0E00               	movlw	0
  1449  000992  1401               	andwf	___ftpack@arg,w,c
  1450  000994  6E06               	movwf	??___ftpack& (0+255),c
  1451  000996  0E00               	movlw	0
  1452  000998  1402               	andwf	___ftpack@arg+1,w,c
  1453  00099A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  1454  00099C  0EFF               	movlw	255
  1455  00099E  1403               	andwf	___ftpack@arg+2,w,c
  1456  0009A0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  1457  0009A2  5006               	movf	??___ftpack,w,c
  1458  0009A4  1007               	iorwf	??___ftpack+1,w,c
  1459  0009A6  1008               	iorwf	??___ftpack+2,w,c
  1460  0009A8  B4D8               	btfsc	status,2,c
  1461  0009AA  D006               	goto	l270
  1462  0009AC  D7E6               	goto	l268
  1463  0009AE  0604               	decf	___ftpack@exp,f,c
  1464  0009B0  90D8               	bcf	status,0,c
  1465  0009B2  3601               	rlcf	___ftpack@arg,f,c
  1466  0009B4  3602               	rlcf	___ftpack@arg+1,f,c
  1467  0009B6  3603               	rlcf	___ftpack@arg+2,f,c
  1468  0009B8                     l270:
  1469  0009B8  BE02               	btfsc	___ftpack@arg+1,7,c
  1470  0009BA  D003               	goto	u520
  1471  0009BC  0E02               	movlw	2
  1472  0009BE  6004               	cpfslt	___ftpack@exp,c
  1473  0009C0  D7F6               	goto	l271
  1474  0009C2                     u520:
  1475  0009C2  A004               	btfss	___ftpack@exp,0,c
  1476  0009C4  9E02               	bcf	___ftpack@arg+1,7,c
  1477  0009C6  90D8               	bcf	status,0,c
  1478  0009C8  3204               	rrcf	___ftpack@exp,f,c
  1479  0009CA  5004               	movf	___ftpack@exp,w,c
  1480  0009CC  1203               	iorwf	___ftpack@arg+2,f,c
  1481  0009CE  5005               	movf	___ftpack@sign,w,c
  1482  0009D0  A4D8               	btfss	status,2,c
  1483  0009D2  8E03               	bsf	___ftpack@arg+2,7,c
  1484  0009D4  C001  F001         	movff	___ftpack@arg,?___ftpack
  1485  0009D8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  1486  0009DC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  1487  0009E0  0012               	return	
  1488  0009E2                     __end_of___ftpack:
  1489                           	opt stack 0
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           prodh	equ	0xFF4
  1495                           prodl	equ	0xFF3
  1496                           status	equ	0xFD8
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           prodh	equ	0xFF4
  1502                           prodl	equ	0xFF3
  1503                           status	equ	0xFD8
  1504                           
  1505                           	psect	rparam
  1506  0000                     tblptru	equ	0xFF8
  1507                           tblptrh	equ	0xFF7
  1508                           tblptrl	equ	0xFF6
  1509                           tablat	equ	0xFF5
  1510                           prodh	equ	0xFF4
  1511                           prodl	equ	0xFF3
  1512                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    16
    Data        0
    BSS         5
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     25      30
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->___ftadd
    _ssdDigit->___lwmod
    ___lwmod->___lwdiv
    ___ftadd->___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    6252
                                             20 COMRAM     5     5      0
                            ___ftadd
                             ___ftge
                            ___lwdiv
                            ___lwmod
                           _ssdDigit
                            _ssdInit
                          _ssdUpdate
 ---------------------------------------------------------------------------------
 (1) _ssdUpdate                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ssdInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ssdDigit                                             2     1      1     480
                                             12 COMRAM     2     1      1
                            ___lwdiv (ARG)
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwmod                                              5     1      4     767
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     770
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     440
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) ___ftadd                                             12     6      6    3593
                                              8 COMRAM    12     6      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2349
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___ftadd
     ___ftpack
   ___ftge
   ___lwdiv
   ___lwmod
     ___lwdiv (ARG)
   _ssdDigit
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
   _ssdInit
   _ssdUpdate

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     19      1E       1       23.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1E      15        0.0%
DATA                 0      0      1E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri May 03 16:58:31 2019

                     l11 07D2                       l13 08BE                       l40 09F0  
                     l42 0A0E                       l43 0A2C                       l44 0A4A  
                     l45 0A68                       l39 0A6E                       _v0 001D  
                     _v1 001C                       _v2 001B                       _v3 001A  
            __CFG_OSC$HS 000000             ___ftadd@exp1 0014             ___ftadd@exp2 0013  
           ___ftadd@sign 0012                      l310 06E0                      l304 06F4  
                    l321 074C                      l322 0768                      l323 0798  
                    l309 06EA                      l270 09B8                      l318 0728  
                    l271 09AE                      l319 071E                      l264 095C  
                    l336 0ABA                      l265 0952                      l337 0AEA  
                    l267 0990                      l268 097A                      l453 0B38  
                    l454 0B30                      l295 0664                      l463 0B82  
                    l464 0B7A                      l457 0B58                      l458 0B62  
                    l299 068E                      l467 0B9A                      l468 0BA4  
                    l931 0B16                      u520 09C2                      u601 0636  
                    u630 0656                      u480 0944                      u730 06FC  
                    u660 0680                      u591 0622                      u760 0730  
                    u840 0B3C                      u690 06BE                      u870 0B86  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1131 08AC  
                   l1135 08BE             __CFG_WDTPS$1 000000                     _main 07BE  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     prodh 000FF4  
                   prodl 000FF3                     start 0000            __CFG_MCLRE$ON 000000  
           ___param_bank 000000                    ?_main 0001          __end_of___ftadd 07BE  
         __CFG_DEBUG$OFF 000000          __end_of___lwdiv 0B6C          __end_of___lwmod 0BAE  
          ___ftpack@sign 0005                    _valor 0601                    tablat 000FF5  
        __end_of_ssdInit 0BFE                    status 000FD8          __initialization 0BD8  
           __end_of_main 0934                   ??_main 0015            __activetblptr 000002  
       __end_of___ftpack 09E2                   ___ftge 0A8A                ??___ftadd 000F  
              ??___lwdiv 0005                ??___lwmod 000C         __end_of_ssdDigit 0BD8  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_ssdInit 0001               __accesstop 0080  
__end_of__initialization 0BE2               ___ftadd@f1 0009               ___ftadd@f2 000C  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
         __pcstackCOMRAM 0001            __end_of_valor 0611                  ?___ftge 0001  
              ?___ftpack 0001       __size_of_ssdUpdate 00A8                  __Hparam 0000  
                __Lparam 0000                ?_ssdDigit 000D          __size_of___ftge 0090  
                ___ftadd 0612                  ___lwdiv 0B1A                  ___lwmod 0B6C  
           __psmallconst 0600              ssdDigit@val 000E              ssdDigit@pos 000D  
                __pcinit 0BD8               ??___ftpack 0006                  __ramtop 0600  
                __ptext0 07BE                  __ptext1 09E2                  __ptext2 0BEC  
                __ptext3 0BAE                  __ptext4 0B6C                  __ptext5 0B1A  
                __ptext6 0A8A                  __ptext7 0612                  __ptext8 0934  
                _display 001E                  _ssdInit 0BEC     end_of_initialization 0BE2  
          __Lmediumconst 0000        __end_of_ssdUpdate 0A8A               ??_ssdDigit 000E  
         __end_of___ftge 0B1A      start_initialization 0BD8                 ??___ftge 0007  
      __size_of___ftpack 00AE              __pbssCOMRAM 001A         ___lwdiv@dividend 0001  
               ?___ftadd 0009        __size_of_ssdDigit 002A                 ?___lwdiv 0001  
               ?___lwmod 0008              __smallconst 0600                 ?_ssdInit 0001  
       ___lwdiv@quotient 0005                _ssdUpdate 09E2                main@tempo 0015  
               __Hrparam 0000                 __Lrparam 0000               ?_ssdUpdate 0001  
       __size_of___ftadd 01AC         __size_of___lwdiv 0052         __size_of___lwmod 0042  
               ___ftpack 0934          ___lwdiv@divisor 0003          ___lwdiv@counter 0007  
       __size_of_ssdInit 0012            __size_of_main 0176                 _ssdDigit 0BAE  
               main@cont 0018         ___lwmod@dividend 0008              ??_ssdUpdate 0001  
        ___lwmod@divisor 000A          ___lwmod@counter 000C  
